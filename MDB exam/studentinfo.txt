package information;

import java.io.IOException;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;

public class inform {
	public static class Student_mapper extends Mapper <LongWritable,Text,Text,IntWritable>
    {
        public void map( LongWritable Key, Text values, Context context ) throws IOException, InterruptedException
        {
            String line = values.toString();
            String[] cols = line.split(",");
            String par = context.getConfiguration().get("INST");
            if (cols[1].equals(par))
            {
                context.write(new Text(cols[1]), new IntWritable(1));
            }
            
        }
    }
    
    public static class Student_mapper_2 extends Mapper <LongWritable,Text,Text,IntWritable>
    {
        public void map( LongWritable Key, Text values, Context context ) throws IOException, InterruptedException
        {
            String line = values.toString();
            String[] cols = line.split(",");
            
            context.write(new Text(cols[2]), new IntWritable(1));
            
        }
    }
    
    public static class Student_mapper_3 extends Mapper <LongWritable,Text,Text,IntWritable>
    {
        public void map( LongWritable Key, Text values, Context context ) throws IOException, InterruptedException
        {
            String line = values.toString();
            String[] cols = line.split(",");
            
            context.write(new Text(cols[3]), new IntWritable(1));
            
        }
    }
    
    public static class Student_mapper_4 extends Mapper <LongWritable,Text,Text,IntWritable>
    {
        public void map( LongWritable Key, Text values, Context context ) throws IOException, InterruptedException
        {
            String line = values.toString();
            String[] cols = line.split(",");
            String par = context.getConfiguration().get("INST");
            if (cols[1].equals(par))
            {
                context.write(new Text(cols[3]), new IntWritable(1));
            }
        }
    }
    
    public static class Student_reducer extends Reducer <Text,IntWritable,Text,IntWritable>
    {
        public void reduce(Text key, Iterable<IntWritable> values, Context context) throws IOException, InterruptedException
        {
            int total=0;
            for(IntWritable x: values)
            {
                total = total + x.get();
            }
            context.write(key, new IntWritable(total));
        }
    }
    
    
    
    
    
    
    public static void main(String[] args) throws Exception
    {
        Configuration conf = new Configuration();
        conf.set("INST", args[2]);
        Job job = Job.getInstance(conf,"Stud-count");
        job.setJarByClass(inform.class);
        job.setMapperClass(Student_mapper.class);
        job.setReducerClass(Student_reducer.class);
        job.setOutputKeyClass(Text.class);
        job.setOutputValueClass(IntWritable.class);
        
        FileInputFormat.addInputPath(job, new Path(args[0]));
        FileOutputFormat.setOutputPath(job, new Path(args[1]));
        
        job.waitForCompletion(true);
        
        Configuration conf2 = new Configuration();
        Job job2 = Job.getInstance(conf2,"Stud-prog-count");
        job2.setJarByClass(inform.class);
        job2.setMapperClass(Student_mapper_2.class);
        job2.setReducerClass(Student_reducer.class);
        job2.setOutputKeyClass(Text.class);
        job2.setOutputValueClass(IntWritable.class);
        
        FileInputFormat.addInputPath(job2, new Path(args[0]));
        FileOutputFormat.setOutputPath(job2, new Path(args[3]));
        
        job2.waitForCompletion(true);
        
        Configuration conf3 = new Configuration();
        Job job3 = Job.getInstance(conf3,"Gender-count");
        job3.setJarByClass(inform.class);
        job3.setMapperClass(Student_mapper_3.class);
        job3.setReducerClass(Student_reducer.class);
        job3.setOutputKeyClass(Text.class);
        job3.setOutputValueClass(IntWritable.class);
        
        FileInputFormat.addInputPath(job3, new Path(args[0]));
        FileOutputFormat.setOutputPath(job3, new Path(args[4]));
        
        job3.waitForCompletion(true);
//        
//        Configuration conf4 = new Configuration();
//        conf4.set("INST", args[2]);
//        Job job4 = Job.getInstance(conf4,"Inst-Gender-count");
//        job4.setJarByClass(inform.class);
//        job4.setMapperClass(Student_mapper_4.class);
//        job4.setReducerClass(Student_reducer.class);
//        job4.setOutputKeyClass(Text.class);
//        job4.setOutputValueClass(IntWritable.class);
//        
//        FileInputFormat.addInputPath(job4, new Path(args[0]));
//        FileOutputFormat.setOutputPath(job4, new Path(args[5]));
//        
//        System.exit(job4.waitForCompletion(true) ? 0 : 1);
        
    }
}
